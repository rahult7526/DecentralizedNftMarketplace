name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Install dependencies and cache
  setup:
    runs-on: ubuntu-latest
    outputs:
      pnpm-cache-dir: ${{ steps.pnpm-cache.outputs.pnpm-cache-dir }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "pnpm-cache-dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

  # Contract compilation and testing
  contracts:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Compile contracts
        run: pnpm compile:contracts

      - name: Run contract tests
        run: pnpm test:contracts
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}

      - name: Generate test coverage
        run: |
          cd contracts
          npx hardhat coverage
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./contracts/coverage/lcov.info
          flags: contracts
          name: contract-coverage
        continue-on-error: true

  # Frontend linting and type checking
  frontend-lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint:client

      - name: Run TypeScript type check
        run: pnpm type-check:client

      - name: Check code formatting
        run: |
          cd app-client
          npx prettier --check "**/*.{ts,tsx,js,jsx,json,css,md}"

  # Frontend build
  frontend-build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: pnpm build:client
        env:
          NEXT_PUBLIC_PINATA_API_KEY: ${{ secrets.PINATA_API_KEY }}
          NEXT_PUBLIC_PINATA_SECRET_API_KEY: ${{ secrets.PINATA_SECRET_API_KEY }}
          NEXT_PUBLIC_ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: app-client/.next/
          retention-days: 7

  # E2E tests with Playwright
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [setup, frontend-build]
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: app-client/.next/

      - name: Install Playwright browsers
        run: |
          cd app-client
          npx playwright install --with-deps chromium

      - name: Start Hardhat node
        run: |
          cd contracts
          npx hardhat node &
          sleep 10
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}

      - name: Deploy contracts to local node
        run: |
          cd contracts
          npx hardhat run scripts/deploy.ts --network localhost
        continue-on-error: true

      - name: Run E2E tests
        run: |
          cd app-client
          npm run test:e2e
        env:
          NEXT_PUBLIC_PINATA_API_KEY: ${{ secrets.PINATA_API_KEY }}
          NEXT_PUBLIC_PINATA_SECRET_API_KEY: ${{ secrets.PINATA_SECRET_API_KEY }}
          NEXT_PUBLIC_ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: app-client/playwright-report/
          retention-days: 30

  # Security audit
  security:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.pnpm-cache-dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          cd app-client
          npm audit --audit-level moderate
        continue-on-error: true

      - name: Run npm audit for contracts
        run: |
          cd contracts
          npm audit --audit-level moderate
        continue-on-error: true

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [contracts, frontend-lint, frontend-build, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: app-client/.next/

      - name: Deploy to Sepolia (if configured)
        run: |
          if [ ! -z "${{ secrets.SEPOLIA_PRIVATE_KEY }}" ]; then
            cd contracts
            npx hardhat run scripts/deploy.ts --network sepolia
          fi
        env:
          PRIVATE_KEY: ${{ secrets.SEPOLIA_PRIVATE_KEY }}
          ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
        continue-on-error: true

      - name: Verify contracts on Etherscan
        run: |
          if [ ! -z "${{ secrets.ETHERSCAN_API_KEY }}" ]; then
            cd contracts
            npx hardhat run scripts/verify.ts --network sepolia
          fi
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        continue-on-error: true

      # Add your deployment steps here (Vercel, Netlify, etc.)
      - name: Deploy Frontend
        run: |
          echo "Add your frontend deployment steps here"
          echo "Frontend is ready for deployment"
        # Example for Vercel:
        # - name: Deploy to Vercel
        #   uses: amondnet/vercel-action@v25
        #   with:
        #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
        #     vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        #     vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        #     working-directory: ./app-client